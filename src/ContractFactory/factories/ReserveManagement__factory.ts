/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ReserveManagement,
  ReserveManagementInterface,
} from "../ReserveManagement";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stableCoinAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnStableCoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "erc1155Receive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "erc1155TokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "erc1155Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "erc20Receive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "erc20TokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "erc20Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
    ],
    name: "erc721Receive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "erc721TokenBalances",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "erc721Transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "stableCoinAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mintStableCoin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "nativeTokenBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011ce380380620011ce8339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b6110a4806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100b35760003560e01c806380666384116100715780638066638414610188578063855c8292146101b8578063aaeba172146101e8578063abb4ed2414610204578063b6011b4c14610220578063edda20e61461023c576100b3565b8062c18b00146100b85780631ea6a9f0146100d45780633790767d146100f05780634048ecd11461010c5780635f1c42fe1461012857806366d48ce514610158575b600080fd5b6100d260048036038101906100cd9190610b49565b610258565b005b6100ee60048036038101906100e99190610bb0565b610302565b005b61010a60048036038101906101059190610c03565b610396565b005b61012660048036038101906101219190610c03565b6104c1565b005b610142600480360381019061013d9190610c56565b61061b565b60405161014f9190610ca5565b60405180910390f35b610172600480360381019061016d9190610cc0565b610640565b60405161017f9190610ca5565b60405180910390f35b6101a2600480360381019061019d9190610bb0565b610658565b6040516101af9190610ca5565b60405180910390f35b6101d260048036038101906101cd9190610ced565b61068a565b6040516101df9190610d3c565b60405180910390f35b61020260048036038101906101fd9190610c03565b6106cc565b005b61021e60048036038101906102199190610e9d565b610826565b005b61023a60048036038101906102359190610c03565b610975565b005b61025660048036038101906102519190610c03565b610a09565b005b80600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f59190610f63565b9250508190555050505050565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104229190610f97565b9250508190555080600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104b59190610f63565b92505081905550505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461054f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105469061104e565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663a0712d68836040518263ffffffff1660e01b815260040161058d9190610ca5565b600060405180830381600087803b1580156105a757600080fd5b505af11580156105bb573d6000803e3d6000fd5b5050505081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461060e9190610f63565b9250508190555050505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60016020528060005260406000206000915090505481565b600460205282600052604060002060205281600052604060002060205280600052604060002060009250925050505481565b60036020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461075a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107519061104e565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff166342966c68836040518263ffffffff1660e01b81526004016107989190610ca5565b600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b5050505081600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108199190610f97565b9250508190555050505050565b81600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108c39190610f97565b9250508190555081600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546109679190610f63565b925050819055505050505050565b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a959190610f63565b92505081905550505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae082610ab5565b9050919050565b610af081610ad5565b8114610afb57600080fd5b50565b600081359050610b0d81610ae7565b92915050565b6000819050919050565b610b2681610b13565b8114610b3157600080fd5b50565b600081359050610b4381610b1d565b92915050565b60008060008060808587031215610b6357610b62610aab565b5b6000610b7187828801610afe565b9450506020610b8287828801610b34565b9350506040610b9387828801610afe565b9250506060610ba487828801610b34565b91505092959194509250565b600080600060608486031215610bc957610bc8610aab565b5b6000610bd786828701610afe565b9350506020610be886828701610b34565b9250506040610bf986828701610afe565b9150509250925092565b600080600060608486031215610c1c57610c1b610aab565b5b6000610c2a86828701610afe565b9350506020610c3b86828701610afe565b9250506040610c4c86828701610b34565b9150509250925092565b60008060408385031215610c6d57610c6c610aab565b5b6000610c7b85828601610afe565b9250506020610c8c85828601610afe565b9150509250929050565b610c9f81610b13565b82525050565b6000602082019050610cba6000830184610c96565b92915050565b600060208284031215610cd657610cd5610aab565b5b6000610ce484828501610afe565b91505092915050565b60008060408385031215610d0457610d03610aab565b5b6000610d1285828601610afe565b9250506020610d2385828601610b34565b9150509250929050565b610d3681610ad5565b82525050565b6000602082019050610d516000830184610d2d565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610daa82610d61565b810181811067ffffffffffffffff82111715610dc957610dc8610d72565b5b80604052505050565b6000610ddc610aa1565b9050610de88282610da1565b919050565b600067ffffffffffffffff821115610e0857610e07610d72565b5b610e1182610d61565b9050602081019050919050565b82818337600083830152505050565b6000610e40610e3b84610ded565b610dd2565b905082815260208101848484011115610e5c57610e5b610d5c565b5b610e67848285610e1e565b509392505050565b600082601f830112610e8457610e83610d57565b5b8135610e94848260208601610e2d565b91505092915050565b600080600080600060a08688031215610eb957610eb8610aab565b5b6000610ec788828901610afe565b9550506020610ed888828901610afe565b9450506040610ee988828901610b34565b9350506060610efa88828901610b34565b925050608086013567ffffffffffffffff811115610f1b57610f1a610ab0565b5b610f2788828901610e6f565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f6e82610b13565b9150610f7983610b13565b9250828201905080821115610f9157610f90610f34565b5b92915050565b6000610fa282610b13565b9150610fad83610b13565b9250828203905081811115610fc557610fc4610f34565b5b92915050565b600082825260208201905092915050565b7f596f7520617265206e6f7420617574686f72697a656420746f20706572666f7260008201527f6d207468697320616374696f6e21000000000000000000000000000000000000602082015250565b6000611038602e83610fcb565b915061104382610fdc565b604082019050919050565b600060208201905081810360008301526110678161102b565b905091905056fea2646970667358221220013dde72c94c418954fd63ba32a31381be0600fef55bdd0d7318f6b6d5b7bb4764736f6c63430008120033";

type ReserveManagementConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReserveManagementConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReserveManagement__factory extends ContractFactory {
  constructor(...args: ReserveManagementConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ReserveManagement> {
    return super.deploy(_admin, overrides || {}) as Promise<ReserveManagement>;
  }
  override getDeployTransaction(
    _admin: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(_admin, overrides || {});
  }
  override attach(address: string): ReserveManagement {
    return super.attach(address) as ReserveManagement;
  }
  override connect(signer: Signer): ReserveManagement__factory {
    return super.connect(signer) as ReserveManagement__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReserveManagementInterface {
    return new utils.Interface(_abi) as ReserveManagementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReserveManagement {
    return new Contract(address, _abi, signerOrProvider) as ReserveManagement;
  }
}
